version: "3"

services:
  roscore:
    build: .
    network_mode: host
    privileged: true
    stdin_open: true
    tty: true
    command: roscore

  rosbridge:
    build: .
    network_mode: host
    privileged: true
    stdin_open: true
    tty: true
    depends_on:
      - roscore
    command: /bin/bash -c '. /catkin_ws/devel/setup.bash && roslaunch --wait rosbridge_server rosbridge_websocket.launch'

  cartesian_impedance_control:
    build: .
    environment:
      - DISPLAY=${DISPLAY}
      - GAZEBO_MODEL_PATH=/catkin_ws/src/franka_ros/franka_description/robots
    volumes:
      - /tmp/.X11-unix:/tmp/.X11-unix
      - ./ros/cartesian_impedance_example_controller_no_marker.launch:/catkin_ws/src/franka_ros/franka_example_controllers/launch/cartesian_impedance_example_controller_no_marker.launch
      - .:/app
      - /app/.venv
    network_mode: host
    privileged: true
    stdin_open: true
    tty: true
    depends_on:
      - roscore
    command: /bin/bash -c '. /catkin_ws/devel/setup.bash && roslaunch --wait franka_example_controllers cartesian_impedance_example_controller_no_marker.launch robot:=panda load_gripper:=True'

  main:
    build: .
    environment:
      - DISPLAY=${DISPLAY}
    volumes:
      - /tmp/.X11-unix:/tmp/.X11-unix
      - ./ros:/catkin_ws/src/ros
      - .:/app
      - /app/.venv
    ports:
      - "8000:8000"
    network_mode: host
    privileged: true
    stdin_open: true
    tty: true
    depends_on:
      - roscore
      - rosbridge
    develop:
      watch:
        - action: sync
          path: .
          target: /app
          ignore:
            - .venv/
        - action: rebuild
          path: ./uv.lock
    command: bash
